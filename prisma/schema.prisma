// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username          String     @unique
  mail_id           String     @unique
  ph_no             String?
  password          String
  profile_image     String?
  readlist          readlist[]
  buyer             books[]    @relation(name: "buyer")
  seller            books[]    @relation(name: "seller")
  account           account[]
  session           session[]
  address           address?   @relation(fields: [addressAddress_id], references: [address_id])
  addressAddress_id String?    @db.Uuid

  @@index([id])
}

model books {
  book_id       String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  book_name     String
  book_type     book_type
  price         Int
  available_for available_for
  categories    category[]
  publisher     String
  author_name   String
  description   String
  image         String
  language      String
  readlist      readlist[]
  book_history  book_history[]
  cart          cart[]
  seller        user?          @relation(name: "seller", fields: [seller_id], references: [id])
  seller_id     String?        @db.Uuid
  buyer         user?          @relation(name: "buyer", fields: [buyer_id], references: [id])
  buyer_id      String?        @db.Uuid
}

enum book_type {
  OLD
  NEW
}

enum available_for {
  SALE
  RENT
}

model category {
  category_id   String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  books         books      @relation(fields: [book_id], references: [book_id])
  book_id       String     @db.Uuid
  category_name String
  related_to    related_to
}

enum related_to {
  FICTION
  NON_FICTION
}

model events {
  event_id             String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  duration             DateTime
  organiser_details    events_org_details @relation(fields: [organiser_details_id], references: [organiser_details_id])
  organiser_details_id String             @db.Uuid
  location             location           @relation(fields: [location_id], references: [loc_id])
  location_id          String             @db.Uuid
}

model events_org_details {
  organiser_details_id String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  ph_no                String
  mail_id              String   @unique
  events               events[]
}

model location {
  loc_id      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  loc_address String
  city        String
  state       String
  events      events[]
  country     String
  image       String
}

model readlist {
  id          String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  book        books  @relation(fields: [book_id], references: [book_id])
  book_id     String @db.Uuid
  book_name   String
  description String
  user        user?  @relation(fields: [user_id], references: [id])
  user_id     String @db.Uuid
}

model address {
  address_id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pincode         Int
  area_and_street String
  city_or_town    String
  state           String
  landmark        String
  user            user[]
  order           order[]
}

model order {
  order_id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  order_date        DateTime
  address           address? @relation(fields: [addressAddress_id], references: [address_id])
  addressAddress_id String?  @db.Uuid
}

model book_history {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  book_name     books         @relation(fields: [book_id], references: [book_id])
  book_id       String        @db.Uuid
  available_for available_for
  date          DateTime
  price         Int
  seller_id     String        @db.Uuid
  buyer_id      String        @db.Uuid
}

model cart {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  books    books?  @relation(fields: [books_id], references: [book_id])
  books_id String? @db.Uuid
}
